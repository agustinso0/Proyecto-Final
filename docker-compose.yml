# docker-compose.yml con hot reload optimizado
version: "3.8"

services:
  # Base de datos MongoDB
  database:
    image: mongo:7
    container_name: app_mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mongo", "--quiet", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend con Express y Mongoose
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: app_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      MONGO_URI: mongodb://mongo:27017/app_database
      JWT_SECRET: your_jwt_secret_here
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3001:3001"
      - "9229:9229" # Puerto para debugging
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_node_modules:/app/node_modules
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app_network

  # Frontend con React y Hot Reload
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: app_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=3000
      - WDS_SOCKET_PATH=/ws
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - app_network
    stdin_open: true
    tty: true

  # Nginx como reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: app_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - app_network

  # Redis para cache y sesiones (opcional)
  redis:
    image: redis:7-alpine
    container_name: app_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    command: redis-server --appendonly yes

volumes:
  mongo_data:
  redis_data:
  frontend_node_modules:
  backend_node_modules:

networks:
  app_network:
    driver: bridge